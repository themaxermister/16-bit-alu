/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [19:0] dipswitch;
  
  wire [16-1:0] M_valuestorer_outA;
  wire [16-1:0] M_valuestorer_outB;
  reg [1-1:0] M_valuestorer_btna;
  reg [1-1:0] M_valuestorer_btnb;
  reg [16-1:0] M_valuestorer_values;
  reg [1-1:0] M_valuestorer_clk;
  reg [1-1:0] M_valuestorer_rst;
  value_store_1 valuestorer (
    .btna(M_valuestorer_btna),
    .btnb(M_valuestorer_btnb),
    .values(M_valuestorer_values),
    .clk(M_valuestorer_clk),
    .rst(M_valuestorer_rst),
    .outA(M_valuestorer_outA),
    .outB(M_valuestorer_outB)
  );
  
  wire [1-1:0] M_compDetect_out;
  reg [1-1:0] M_compDetect_in;
  edge_detector_2 compDetect (
    .clk(clk),
    .in(M_compDetect_in),
    .out(M_compDetect_out)
  );
  
  wire [1-1:0] M_compCond_out;
  button_conditioner_3 compCond (
    .clk(clk),
    .in(io_button[0+0-:1]),
    .out(M_compCond_out)
  );
  
  wire [1-1:0] M_errorDetect_out;
  reg [1-1:0] M_errorDetect_in;
  edge_detector_2 errorDetect (
    .clk(clk),
    .in(M_errorDetect_in),
    .out(M_errorDetect_out)
  );
  
  wire [1-1:0] M_errorCond_out;
  button_conditioner_3 errorCond (
    .clk(clk),
    .in(io_button[1+0-:1]),
    .out(M_errorCond_out)
  );
  
  wire [1-1:0] M_rstDetect_out;
  reg [1-1:0] M_rstDetect_in;
  edge_detector_2 rstDetect (
    .clk(clk),
    .in(M_rstDetect_in),
    .out(M_rstDetect_out)
  );
  
  wire [1-1:0] M_rstCond_out;
  button_conditioner_3 rstCond (
    .clk(clk),
    .in(io_button[2+0-:1]),
    .out(M_rstCond_out)
  );
  
  localparam CLKSPEED = 5'h1e;
  
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [16-1:0] M_myalu_s;
  wire [3-1:0] M_myalu_zvn;
  reg [16-1:0] M_myalu_a;
  reg [16-1:0] M_myalu_b;
  reg [6-1:0] M_myalu_alufn_signal;
  alu_4 myalu (
    .a(M_myalu_a),
    .b(M_myalu_b),
    .alufn_signal(M_myalu_alufn_signal),
    .s(M_myalu_s),
    .zvn(M_myalu_zvn)
  );
  
  wire [20-1:0] M_autotester_out;
  auto_tester_5 autotester (
    .clk(clk),
    .rst(rst),
    .restart(io_button[1+0-:1]),
    .out(M_autotester_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [20-1:0] M_seg_values;
  multi_seven_seg_7 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  localparam IDLE_state = 3'd0;
  localparam ADD_state = 3'd1;
  localparam NORMAL_state = 3'd2;
  localparam FAIL_state = 3'd3;
  localparam AUTO_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_counter_d = M_counter_q + 1'h1;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_compDetect_in = M_compCond_out;
    M_errorDetect_in = M_errorCond_out;
    M_rstDetect_in = M_rstCond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_valuestorer_clk = clk;
    M_valuestorer_btna = io_button[3+0-:1];
    M_valuestorer_btnb = io_button[4+0-:1];
    M_valuestorer_values[0+7-:8] = io_dip[0+7-:8];
    M_valuestorer_values[8+7-:8] = io_dip[8+7-:8];
    M_valuestorer_rst = M_rstDetect_out;
    M_myalu_alufn_signal = io_dip[16+0+5-:6];
    M_myalu_a = M_valuestorer_outA;
    M_myalu_b = M_valuestorer_outB;
    io_led[16+0+5-:6] = io_dip[16+0+5-:6];
    
    case (M_state_q)
      IDLE_state: begin
        M_seg_values = 20'h0b9b1;
        io_led[8+7-:8] = 8'h00;
        io_led[0+7-:8] = 8'h00;
        if (M_errorDetect_out) begin
          M_state_d = ADD_state;
        end
        if (M_compDetect_out) begin
          M_state_d = NORMAL_state;
        end
      end
      NORMAL_state: begin
        io_led[8+7-:8] = M_myalu_s[8+7-:8];
        io_led[0+7-:8] = M_myalu_s[0+7-:8];
        
        case (io_dip[16+0+5-:6])
          6'h00: begin
            dipswitch = 20'h5b9de;
          end
          6'h01: begin
            dipswitch = 20'h2c29e;
          end
          6'h02: begin
            dipswitch = 20'h7be0d;
          end
          6'h18: begin
            dipswitch = 20'h5bdde;
          end
          6'h19: begin
            dipswitch = 20'h7adee;
          end
          6'h1e: begin
            dipswitch = 20'h04bde;
          end
          6'h1f: begin
            dipswitch = 20'h7825e;
          end
          6'h16: begin
            dipswitch = 20'h9825e;
          end
          6'h17: begin
            dipswitch = 20'h9bc12;
          end
          6'h1a: begin
            dipswitch = 20'h5fbde;
          end
          6'h20: begin
            dipswitch = 20'h2cdbe;
          end
          6'h21: begin
            dipswitch = 20'h2ce5e;
          end
          6'h23: begin
            dipswitch = 20'h2c97e;
          end
          6'h33: begin
            dipswitch = 20'hac53e;
          end
          6'h35: begin
            dipswitch = 20'hac7de;
          end
          6'h37: begin
            dipswitch = 20'hab63e;
          end
          default: begin
            dipswitch = 20'h7455e;
          end
        endcase
        
        case (M_myalu_zvn[1+0-:1])
          1'h0: begin
            M_seg_values = dipswitch;
          end
          1'h1: begin
            M_seg_values = 20'h04232;
          end
          default: begin
            M_seg_values = dipswitch;
          end
        endcase
        if (M_rstDetect_out) begin
          M_state_d = IDLE_state;
        end
        if (M_compDetect_out) begin
          M_state_d = AUTO_state;
        end
        if (M_errorDetect_out) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        io_led[0+7-:8] = M_myalu_s[0+7-:8] + 1'h1;
        M_state_d = FAIL_state;
      end
      FAIL_state: begin
        io_led[8+7-:8] = M_myalu_s[8+7-:8];
        io_led[0+7-:8] = M_myalu_s[0+7-:8] + 1'h1;
        M_seg_values = 20'h52d8d;
        if (M_compDetect_out) begin
          M_state_d = NORMAL_state;
        end
        if (M_rstDetect_out) begin
          M_state_d = IDLE_state;
        end
      end
      AUTO_state: begin
        M_seg_values = M_autotester_out;
        if (M_rstDetect_out) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
