module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig dipswitch[4][5];      // state signal
  value_store valuestorer;  // Init value_store module
  
  // Detect button press on computation button 0
  edge_detector compDetect (#RISE(1) , #FALL(0), .clk(clk));    
  button_conditioner compCond (.clk(clk) , .in(io_button[0]));
  
  // Detect button press on error button 1
  edge_detector errorDetect (#RISE(1), #FALL(0), .clk(clk));
  button_conditioner errorCond (.clk(clk), .in(io_button[1]));
  
  // Detect button press on reset button 2
  edge_detector rstDetect (#RISE(1), #FALL(0), .clk(clk));
  button_conditioner rstCond (.clk(clk), .in(io_button[2]));
  
  // Set speed of clock cycle
  const CLKSPEED = 30;
  dff counter[CLKSPEED](.clk(clk),.rst(rst));
  
  // Instantiate alu 
  alu myalu; 
  //lk(counter.q[CLKSPEED-1]){
    //m auto_tester(.rst(rst))={IDLE,ADD,OR,ERROR,END};
  //
  
  auto_tester autotester(.clk(clk), .rst(rst), .restart(io_button[1]));
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. Ensures the entire FPGA comes out of reset at the same time.
    
    reset_conditioner reset_cond;
    .rst(rst){
      multi_seven_seg seg;
      fsm state(.clk(clk), .rst(rst)) = {IDLE, ADD, NORMAL, FAIL, AUTO};
    }
  }
  
  always {
    
    counter.d = counter.q+1;
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    compDetect.in = compCond.out;  // Check if comp button 0 pressed
    errorDetect.in = errorCond.out; // Check if error button 1 pressed
    rstDetect.in = rstCond.out;  // Check if reset button 2 pressed
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
  
    io_led = 3x{{8h00}};    // turn LEDs off

    // seg.values = {5h0,5h0,5h0,5h0};
    io_seg = ~seg.seg;      // connect segments to the driver
    io_sel = ~seg.sel;      // connect digit select to the driver
     
    valuestorer.clk = clk;  // Clock signal
    valuestorer.btna = io_button[3];  // Button 3 trigger state
    valuestorer.btnb = io_button[4];  // Button 4 trigger state
    valuestorer.values[7:0] = io_dip[0]; // Input binary values for digits 0 to 7
    valuestorer.values[15:8] = io_dip[1]; // Input binary values for digits 8 to 15
    
    valuestorer.rst = rstDetect.out;  // If reset button press
    
    myalu.alufn_signal = io_dip[2][5:0];  // State selection by Third switch segment, Switch 3 to 8
    myalu.a = valuestorer.outA;  // Input for first binary value A
    myalu.b = valuestorer.outB;  // Inout for second binary value B
    
    
    //io_led[0][7:0] = valuestorer.outA[7:0];
    //io_led[1][7:0] = valuestorer.outA[15:8];
    //io_led[0][7:0] = valuestorer.outB[7:0];
    //io_led[1][7:0] = valuestorer.outB[15:8];
    
    io_led[2][5:0] = io_dip[2][5:0];  // LED corresponds to state selection by Third switch segment, Switch 3 to 8
    
    //io_led[0][7:0] = myalu.out[7:0];
    //io_led[1][7:0] = myalu.out[15:8];
    case(state.q){  // Current state
      state.IDLE:
        seg.values = {5h1,5d14,5d13,5d17};  // 1 d L E
        io_led[1] = 8h00;  // OFF LED
        io_led[0] = 8h00;  // OFF LED
        //io_led[1] = myalu.out[15:8];
        //io_led[0] = myalu.out[7:0];     
            
        if(errorDetect.out){
          // If error button 1 pressed
          state.d = state.ADD;  // Set current state to ADD
        }
        if(compDetect.out){
          // If comp button 0 pressed
          state.d = state.NORMAL;  // Set current state to NORMAL
        }
      state.NORMAL:
        io_led[1] = myalu.s[15:8];
        io_led[0] = myalu.s[7:0];
        // Set 7-segment LED
        case(io_dip[2][5:0]){  // Third switch segment, Switch 3 to 8
          // 6bXXXXXX = Correp third switch segment arrangement
          // dipswitch = Text display 7-segment values
          6b000000: dipswitch = {5d11,5d14,5d14,5d30}; // ADD
          6b000001: dipswitch = {5d5, 5d16, 5d20, 5d30}; // SUB
          6b000010: dipswitch = {5d15,5d15,5d16,5d13};  // MUL
          6b011000: dipswitch = {5d11,5d15,5d14,5d30}; // AND
          6b011001: dipswitch = {5d15, 5d11, 5d15, 5d14}; // NAND
          6b011110: dipswitch = {5d0,5d18,5d30,5d30}; // OR
          6b011111: dipswitch = {5d15, 5d0, 5d18, 5d30}; // NOR
          6b010110: dipswitch = {5d19, 5d0, 5d18, 5d30}; // XOR
          6b010111: dipswitch = {5d19, 5d15, 5d0, 5d18}; // XNOR
          6b011010: dipswitch = {5d11, 5d30, 5d30, 5d30}; // A (EQUAL)
          6b100000: dipswitch = {5d5,5d19,5d13,5d30}; //SHL
          6b100001: dipswitch =  {5d5, 5d19, 5d18, 5d30}; //SHR
          6b100011: dipswitch = {5d5, 5d18, 5d11, 5d30}; //SRA
          6b110011: dipswitch = {5d21,5d17,5d9,5d30}; //CMPEQ
          6b110101: dipswitch = {5d21, 5d17, 5d30, 5d30}; //CMPLT
          6b110111: dipswitch = {5d21, 5d13, 5d17, 5d30}; //CMPLE
          default: dipswitch = {5d14,5d17,5d10,5d30}; // DEFT
        }
        
        case(myalu.zvn[1]){ // V-value
          0:seg.values=dipswitch;  // Current state
          1:seg.values={5d0,5d16,5d17,5d18};  // 0 u e r (Over)
          default: seg.values=dipswitch;  // Current state
        }
        
        if (rstDetect.out) {
          // If reset button 1 pressed, set state to IDLE
          state.d = state.IDLE;
        }
       
        if (compDetect.out){
          // If comp button 0 pressed, set state to AUTO
          state.d = state.AUTO;
        }
        
        if(errorDetect.out){
          // If error button pressed
          state.d = state.ADD;
        }
        
      state.ADD:
        io_led[0] = myalu.s[7:0]+1;  // Display second LED segment to output S[0:8]
        state.d = state.FAIL;  // Set state to FAIL
        
      state.FAIL:
        io_led[1] = myalu.s[15:8];  // Display second LED segment to output S[8:15]
        io_led[0] = myalu.s[7:0]+1; // Display first LED segment to output S[0:7]
        seg.values = {5ha,5hb,5hc,5hd}; // FAIL
        if(compDetect.out){
          state.d = state.NORMAL;  // If comp button 0 pressed, set state to NORMAL
        }
        if (rstDetect.out) {
          state.d = state.IDLE; // If reset button 2 pressed, set state to IDLE
        }
        
      state.AUTO:
          //seg.values = {4h5,4hf,4hf,4h3};  // AUTO
          seg.values = autotester.out;  // Display autotester output
          
          if (rstDetect.out) {  // If reset button 2 pressed, set state to IDLE
           state.d = state.IDLE; // Set state to IDLE
          }
  }
}